Chapter 1

	Web browser displays content identified by URL. First step is to use URL to connect to server
	somwhere on internet and download that information


	URL looks like this:

	http://example.org/index.html

	scheme: http                    -----> HOW to get information
	hostname: example.org           -----> WHERE to get information
	path: index.html                -----> WHAT information to get

	
	With a URL, the browser can ask the OS to get in touch with server described by hostname
	OS uses talks to DNS server which converts host name to a destination IP address
	etc
	(this is not a networking course)

	On macOS, one can use netcat to connect to server:

	   nc -v example.org 80

	On Linux, one can use telnet to connect to server:

	   telnet example.org 80


	You'll get an output that looks like this:

	       Trying 93.184.216.34...
	       Connectd to example.org.
	       Escape character is '^]'

	This means that the OS converted host name example.org into 93.184.216.34

	Once connected to the server, the web browser requests information from server by giving its path
	In our example URL, the path is /index.html

	The request looks like this:

	    GET /index.html HTTP/1.0
	    Host: example.org

	GET means browser would like to recieve information, then comes the path /index.html,
	then the version of HTTP the browser is using to communicate, HTTP/1.0

	After the first line, each line contains a header, consisting of
	a name (eg, Host) and a value (eg example.org)

	After the headers comes a single blank line, this tells the host you are done with headers

	When the server responds, the response looks like this:

	     HTTP/1.0 200 OK

	HTTP Version:            HTTP/1.0
	Response Code:           200
	Response Description     OK

	There are many response codes, they can be organized in the following way:

	      100s  information messsages
	      200s  successful messages
	      300s  request follow-up action (typically a redirect)
	      400s  client sent bad request
	      500s  server handled request badly


	After the response, the server sends its own headers.
	After the headers, the server sends a blank line
	After the blank line, the server sends HTML (your browser its HTML because of Content-Type header)

	The HTML forms the body of the response


	We will now create a data structure representing a URL in memory
	

	It will hold the scheme, host, path
	scheme, host are split at "://"
	host, path are split it "/"


	In the  request, we will create a TCP socket, then connect to the host on port 8-, given by self.host,
	and then send an http request to self.host, GETting self.path

	The socket's address familty (AF) is given by AF_INET
	THe socket's type is SOCK_STREAM (meaning each computer can send arbitrary amounts of data)
	The socket's prototcal is IPPROTO_TCP

	Note, Python sockets' connect method takes a pair (host, port). This is different depending on the address family.


	Important to note the the message in the send method must take information encoded as a an array of bytes.
	(Next time we see an erro about str vs bytes, failing to encode an str is the likely culprit)

	

	
	Our process can be summarized as follows:
	    - Create URL object (split at ://, / for scheme, host, path
	    - Open a socket and make an HTTP request to host
	    - Parse HTTP response
	      - Get status line (eg, HTTP/1.0 200 OK\r\n)
	      - Parse headers
	      - Break when encountering \r\n
	    - Return body
	    - Parse body by printing all text not in a tag (one character at a time)
	    
	

	

	









	
